package org.jqassistant.plugin.cyclonedx.api.model.sbom;

import java.time.ZonedDateTime;
import java.util.List;

import com.buschmais.xo.neo4j.api.annotation.Label;
import com.buschmais.xo.neo4j.api.annotation.Relation;
import com.buschmais.xo.neo4j.api.annotation.Relation.Outgoing;

import org.jqassistant.plugin.cyclonedx.api.model.CycloneDXDescriptor;

@Label("Vulnerability")
public interface VulnerabilityDescriptor extends CycloneDXDescriptor, BomRefTemplate, ByToolsTemplate, HasPropertiesTemplate, HasVulnerabilitySourceTemplate {

    String getId();

    void setId(String id);

    Integer[] getCwes();

    void setCwes(Integer[] cwes);

    String getDescription();

    void setDescription(String description);

    String getDetail();

    void setDetail(String detail);

    String getRecommendation();

    void setRecommendation(String recommendation);

    ZonedDateTime getCreated();

    void setCreated(ZonedDateTime created);

    ZonedDateTime getPublished();

    void setPublished(ZonedDateTime published);

    ZonedDateTime getUpdated();

    void setUpdated(ZonedDateTime updated);

    @Relation("HAS_ADVISORY")
    List<VulnerabilityAdvisoryDescriptor> getAdvisories();

    @Relation("HAS_RATING")
    List<VulnerabilityRatingDescriptor> getRatings();

    @Relation("HAS_REFERENCE")
    List<VulnerabilityReferenceDescriptor> getReferences();

    @Relation
    @Outgoing
    List<VulnerabilityAffectsDescriptor> getAffects();

    @Relation("HAS_CREDITS")
    VulnerabilityCreditsDescriptor getCredits();

    void setCredits(VulnerabilityCreditsDescriptor credits);

    @Relation("HAS_ANALYSIS")
    VulnerabilityAnalysisDescriptor getAnalysis();

    void setAnalysis(VulnerabilityAnalysisDescriptor credits);

}


