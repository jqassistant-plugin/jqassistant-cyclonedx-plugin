package org.jqassistant.plugin.cyclonedx.impl.sbom.mapper;

import java.util.List;

import com.buschmais.jqassistant.core.scanner.api.Scanner;
import com.buschmais.jqassistant.core.scanner.api.ScannerContext;

import org.cyclonedx.model.vulnerability.Vulnerability;
import org.jqassistant.plugin.cyclonedx.api.model.sbom.ComponentDescriptor;
import org.jqassistant.plugin.cyclonedx.api.model.sbom.VulnerabilityAffectsDescriptor;
import org.jqassistant.plugin.cyclonedx.api.model.sbom.VulnerabilityDescriptor;
import org.mapstruct.*;

@Mapper(uses = {OrganizationalContactMapper.class, OrganizationalEntityMapper.class, PropertyMapper.class, ToolMapper.class,
    VulnerabilityAdvisoryMapper.class, VulnerabilityAffectsMapper.class, VulnerabilityAnalysisMapper.class,
    VulnerabilityRatingMapper.class, VulnerabilityReferenceMapper.class, VulnerabilitySourceMapper.class})
public interface VulnerabilityMapper extends BomRefDescriptorMapper<Vulnerability, VulnerabilityDescriptor> {

    @Override
    default String getBomRef(Vulnerability value) {
        return value.getBomRef();
    }

    @Override
    @Mapping(target = "affects", ignore = true)
    @Mapping(target = "individualCredits", source = "credits.individuals")
    @Mapping(target = "organizationCredits", source = "credits.organizations")
    @BeanMapping(ignoreUnmappedSourceProperties = {"affects"})
    VulnerabilityDescriptor toDescriptor(Vulnerability value, @Context Scanner scanner);

    @AfterMapping
    default void map(Vulnerability vulnerability, @MappingTarget VulnerabilityDescriptor vulnerabilityDescriptor, @Context Scanner scanner) {
        for (Vulnerability.Affect affect : vulnerability.getAffects()) {
            create(affect, vulnerabilityDescriptor, scanner);
        }
    }

    static void create(Vulnerability.Affect affect, VulnerabilityDescriptor vulnerabilityDescriptor, Scanner scanner) {
        ScannerContext scannerContext = scanner.getContext();
        BomRefResolver bomRefResolver = scannerContext.peek(BomRefResolver.class);
        ComponentDescriptor componentDescriptor = bomRefResolver.resolve(affect.getRef(), ComponentDescriptor.class, scannerContext);
        List<Vulnerability.Version> versions = affect.getVersions();
        if (versions != null && !versions.isEmpty()) {
            for (Vulnerability.Version version : versions) {
                VulnerabilityAffectsMapper.INSTANCE.map(version, create(vulnerabilityDescriptor, componentDescriptor, scannerContext));
            }
        } else {
            create(vulnerabilityDescriptor, componentDescriptor, scannerContext);
        }
    }

    static VulnerabilityAffectsDescriptor create(VulnerabilityDescriptor vulnerabilityDescriptor, ComponentDescriptor componentDescriptor,
                                                 ScannerContext scannerContext) {
        return scannerContext.getStore()
            .create(vulnerabilityDescriptor, VulnerabilityAffectsDescriptor.class, componentDescriptor);
    }

}
